def gitCloning(GIT_HUB_URL, BRANCH_NAME, GIT_CREDENTIALS) {
    echo 'Cloning files from (branch: "' + BRANCH_NAME + '" )'
    // The below will clone your repo and will be checked out to master branch by default.
    git branch: BRANCH_NAME , credentialsId: GIT_CREDENTIALS, url: GIT_HUB_URL
    sh 'ls'
    // Do a ls -lart to view all the files are cloned. It will be clonned. This is just for you to be sure about it.
    sh "ls -lart ./*" 
    // List all branches in your repo. 
    sh "git branch -a"
    // Checkout to a specific branch in your repo.
    sh "git checkout ${BRANCH_NAME}"
}

def checkBranchUpdate(mainBranch, majorBranch) {
    sh "git fetch origin"
    
    // Get the merge base commit hash
    def mergeBase = sh(script: "git merge-base ${mainBranch} ${majorBranch}", returnStdout: true).trim()
    
    // Check if majorBranch contains the merge base
    def contains = sh(script: "git branch --contains ${mergeBase} ${majorBranch}", returnStdout: true).trim()

    if (contains) {
        echo "The branch '${majorBranch}' is up-to-date with '${mainBranch}'."
    } else {
        sendSlackNotification("The branch '${majorBranch}' is out of date with '${mainBranch}' in the repository.")
    }
}


def sendSlackNotification(message) {
    slackSend(channel: 'C07AL8LLEGN', message: message, webhookUrl: env.SLACK_WEBHOOK_URL)
}

pipeline {
    agent {
        label 'e2e-node'
    }

    environment {
        SLACK_WEBHOOK_URL = 'INTERNAL-SLACK-URL'
        GIT_CREDENTIALS_ID = '91930e69-dad2-4054-9f8f-207076cca38f'
    }

    stages {
        stage('Clone Repositories') {
            steps {
                script {
                    def repos = [
                        'https://github.com/shipsy/shipsy-ondemand-appium.git'
                    ]

                    def majorBranch = 'Major'  // Replace with the actual major branch name
                    def mainBranch = 'main'

                    repos.each { repo ->
                        dir("${env.WORKSPACE}/${repo.split('/').last().replace('.git','')}") {
                            echo "work space checking"
                            gitCloning(repo, majorBranch, env.GIT_CREDENTIALS_ID)
                            echo "Clonig done"
                            checkBranchUpdate(mainBranch, majorBranch)
                        }
                    }
                }
            }
        }
    }

    post {
        failure {
            script {
                sendSlackNotification("Pipeline failed. Please check.")
            }
        }
    }
}



