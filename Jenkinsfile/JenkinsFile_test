def fetchAndCompareBranches(GIT_HUB_URL, GIT_CREDENTIALS, mainBranch, majorBranch) {
    echo 'Fetching branches from the repository'
    
    // Create a temporary directory to work in
    dir('temp-repo') {
        // Initialize a new git repository
        sh 'git init'

        // Set up the remote repository
        sh "git remote add origin ${GIT_HUB_URL}"

        // Fetch only the specific branches you need
        sh "git fetch --depth=1 origin ${mainBranch} --recurse-submodules=no --progress --quiet --force --depth=1 --credentialsId=${GIT_CREDENTIALS}"
        sh "git fetch --depth=1 origin ${majorBranch} --recurse-submodules=no --progress --quiet --force --depth=1 --credentialsId=${GIT_CREDENTIALS}"


        // Get the merge base commit hash
        def mergeBase = sh(script: "git merge-base origin/${mainBranch} origin/${majorBranch}", returnStdout: true).trim()

        // Check if majorBranch contains the merge base
        def contains = sh(script: "git branch --contains ${mergeBase} origin/${majorBranch}", returnStdout: true).trim()

        if (contains) {
            echo "The branch '${majorBranch}' is up-to-date with '${mainBranch}'."
        } else {
            sendSlackNotification("The branch '${majorBranch}' is out of date with '${mainBranch}' in the repository.")
        }
    }
}

def sendSlackNotification(message) {
    slackSend(channel: 'C07AL8LLEGN', message: message, webhookUrl: env.SLACK_WEBHOOK_URL)
}


pipeline {
    agent {
        label 'e2e-node'
    }

    environment {
        SLACK_WEBHOOK_URL = 'INTERNAL-SLACK-URL'
        GIT_CREDENTIALS_ID = '91930e69-dad2-4054-9f8f-207076cca38f'
    }

    stages {
        stage('Compare Branches') {
            steps {
                script {
                    def repos = [
                        'https://github.com/shipsy/shipsy-ondemand-appium.git'
                    ]

                    def majorBranch = 'Major'  // Replace with the actual major branch name
                    def mainBranch = 'main'

                    repos.each { repo ->
                        fetchAndCompareBranches(repo, env.GIT_CREDENTIALS_ID, mainBranch, majorBranch)
                    }
                }
            }
        }
    }

    post {
        failure {
            script {
                sendSlackNotification("Pipeline failed. Please check.")
            }
        }
    }
}
